File: D:\goit-react-hw-08-1-phonebook\src\index.js 
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom'; // Import BrowserRouter
import store from './redux/store';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>
);
File: D:\goit-react-hw-08-1-phonebook\src\App.jsx 
// src/App.jsx
import React from 'react';
import { Route, Routes } from 'react-router-dom';
import Navigation from './components/Navigation/Navigation';
import UserMenu from './components/UserMenu/UserMenu';
import RegisterPage from './pages/RegisterPage';
import LoginPage from './pages/LoginPage';
import ContactsPage from './pages/ContactsPage';
import PrivateRoute from './components/PrivateRoute/PrivateRoute';

const App = () => (
  <>
    <Navigation />
    <UserMenu />
    <Routes>
      <Route path="/register" element={<RegisterPage />} />
      <Route path="/login" element={<LoginPage />} />
      <Route
        path="/contacts"
        element={<PrivateRoute component={ContactsPage} />}
      />
    </Routes>
  </>
);

export default App;
File: D:\goit-react-hw-08-1-phonebook\src\components\ContactForm\ContactForm.jsx 
import React, { useState, useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { addContact, updateContact } from '../../redux/contactsOperations';

const ContactForm = ({ contactToUpdate }) => {
  const [name, setName] = useState('');
  const [number, setNumber] = useState('');
  const dispatch = useDispatch();

  useEffect(() => {
    if (contactToUpdate) {
      setName(contactToUpdate.name);
      setNumber(contactToUpdate.number);
    } else {
      setName('');
      setNumber('');
    }
  }, [contactToUpdate]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (name === '' || number === '') {
      return alert('Please fill in both fields.');
    }

    if (contactToUpdate) {
      dispatch(updateContact({ id: contactToUpdate.id, updatedContact: { name, number } }));
    } else {
      dispatch(addContact({ name, number }));
    }

    setName('');
    setNumber('');
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
      </label>
      <label>
        Number
        <input
          type="tel"
          value={number}
          onChange={(e) => setNumber(e.target.value)}
        />
      </label>
      <button type="submit">{contactToUpdate ? 'Update Contact' : 'Add Contact'}</button>
    </form>
  );
};

export default ContactForm;
File: D:\goit-react-hw-08-1-phonebook\src\components\ContactList\ContactList.jsx 
import React from 'react';
import { useDispatch } from 'react-redux';
import { deleteContact } from '../../redux/contactsOperations';

const ContactList = ({ contacts, onEdit }) => {
  const dispatch = useDispatch();

  const handleDelete = (id) => {
    dispatch(deleteContact(id));
  };

  return (
    <ul>
      {contacts.map(contact => (
        <li key={contact.id}>
          {contact.name}: {contact.number}
          <button onClick={() => handleDelete(contact.id)}>Delete</button>
          <button onClick={() => onEdit(contact)}>Edit</button>
        </li>
      ))}
    </ul>
  );
};

export default ContactList;
File: D:\goit-react-hw-08-1-phonebook\src\components\ErrorBoundary\ErrorBoundary.jsx 
// src/components/ErrorBoundary/ErrorBoundary.jsx
import React, { Component } from 'react';

class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    console.error("Error Boundary Caught an Error:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
File: D:\goit-react-hw-08-1-phonebook\src\components\Filter\Filter.jsx 
import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { setFilter } from '../../redux/contactsSlice';

const Filter = () => {
  const dispatch = useDispatch();
  const filter = useSelector(state => state.contacts.filter);

  const handleChange = e => {
    dispatch(setFilter(e.target.value));
  };

  return (
    <div>
      <label>
        Find contacts by name
        <input
          type="text"
          value={filter}
          onChange={handleChange}
        />
      </label>
    </div>
  );
};

export default Filter;
File: D:\goit-react-hw-08-1-phonebook\src\components\Navigation\Navigation.jsx 
// src/components/Navigation/Navigation.jsx
import React from 'react';
import { NavLink } from 'react-router-dom';

const Navigation = () => (
  <nav>
    <NavLink to="/register">Register</NavLink>
    <NavLink to="/login">Login</NavLink>
    <NavLink to="/contacts">Contacts</NavLink>
  </nav>
);

export default Navigation;
File: D:\goit-react-hw-08-1-phonebook\src\components\PrivateRoute\PrivateRoute.jsx 
// src/components/PrivateRoute/PrivateRoute.jsx
import React from 'react';
import { useSelector } from 'react-redux';
import { Navigate } from 'react-router-dom';

const PrivateRoute = ({ component: Component, ...routeProps }) => {
  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);
  return isLoggedIn ? <Component {...routeProps} /> : <Navigate to="/login" />;
};

export default PrivateRoute;
File: D:\goit-react-hw-08-1-phonebook\src\components\UserMenu\UserMenu.jsx 
// src/components/UserMenu/UserMenu.jsx
import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { logoutUser } from '../../redux/authOperations';
import { useNavigate } from 'react-router-dom';

const UserMenu = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const user = useSelector(state => state.auth.user); // Get user from state

  // Check if user exists before trying to access email
  if (!user) {
    return null; // Optionally, return a placeholder or a link to login
  }

  const handleLogout = () => {
    dispatch(logoutUser()).then(() => {
      navigate('/'); // Redirect to home after logging out
    });
  };

  return (
    <div>
      <p>{user.email}</p> {/* Safely access user.email because we checked if user exists */}
      <button onClick={handleLogout}>Logout</button>
    </div>
  );
};

export default UserMenu;
File: D:\goit-react-hw-08-1-phonebook\src\pages\ContactsPage.jsx 
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchContacts } from '../redux/contactsOperations';
import ContactList from '../components/ContactList/ContactList';
import ContactForm from '../components/ContactForm/ContactForm';
import Filter from '../components/Filter/Filter';

const ContactsPage = () => {
  const dispatch = useDispatch();
  const { items, isLoading, error } = useSelector(state => state.contacts);
  const [contactToUpdate, setContactToUpdate] = useState(null);

  useEffect(() => {
    dispatch(fetchContacts());
  }, [dispatch]);

  const handleEdit = (contact) => {
    setContactToUpdate(contact);
  };

  return (
    <div>
      <h1>Your Contacts</h1>
      <ContactForm contactToUpdate={contactToUpdate} />
      <h2>Contacts</h2>
      <Filter />
      {isLoading && <p>Loading...</p>}
      {error && <p>Error: {error}</p>}
      <ContactList contacts={items} onEdit={handleEdit} />
    </div>
  );
};

export default ContactsPage;
File: D:\goit-react-hw-08-1-phonebook\src\pages\HomePage.jsx 
// src/pages/HomePage.jsx
import React from 'react';

const HomePage = () => (
  <div>
    <h1>Welcome to the Contact Book</h1>
    <nav>
      <NavLink to="/register">Register</NavLink> |{' '}
      <NavLink to="/login">Login</NavLink> |{' '}
      <NavLink to="/contacts">Contacts</NavLink>
    </nav>
  </div>
);

export default HomePage;  // Ensure this is default export
File: D:\goit-react-hw-08-1-phonebook\src\pages\LoginPage.jsx 
// src/pages/LoginPage.jsx
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { loginUser } from '../redux/authOperations';
import styles from './AuthForm.module.css'; // Using the same styles as the RegisterPage

const LoginPage = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const dispatch = useDispatch();
  const error = useSelector(state => state.auth.error);

  const handleSubmit = e => {
    e.preventDefault();
    dispatch(loginUser({ email, password }));
  };

  return (
    <div>
      <h2>Login</h2>
      {error && <p className={styles.error}>{error}</p>}
      <form onSubmit={handleSubmit} className={styles.form}>
        <label>
          Email
          <input
            type="email"
            value={email}
            onChange={e => setEmail(e.target.value)}
            required
          />
        </label>
        <label>
          Password
          <input
            type="password"
            value={password}
            onChange={e => setPassword(e.target.value)}
            required
          />
        </label>
        <button type="submit" className={styles.button}>Login</button>
      </form>
    </div>
  );
};

export default LoginPage;
File: D:\goit-react-hw-08-1-phonebook\src\pages\RegisterPage.jsx 
// src/pages/RegisterPage.jsx
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { registerUser } from '../redux/authOperations';
import styles from './AuthForm.module.css'; // Create a common styles file for login/register forms

const RegisterPage = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [submitError, setSubmitError] = useState(''); // State to handle form errors
  const dispatch = useDispatch();
  const error = useSelector(state => state.auth.error);

  // Validate form before submitting
  const handleSubmit = e => {
    e.preventDefault();

    if (!name || !email || !password) {
      setSubmitError('All fields are required'); // Handle empty field error
      return;
    }

    // Clear submit error before dispatch
    setSubmitError('');

    // Dispatch the register action
    dispatch(registerUser({ name, email, password }))
      .unwrap() // Unwraps the result to catch errors in .catch
      .catch(() => {
        setSubmitError('Registration failed. Please check your input and try again.');
      });
  };

  return (
    <div>
      <h2>Register</h2>

      {/* Show server error or form error */}
      {submitError && <p className={styles.error}>{submitError}</p>}
      {error && <p className={styles.error}>{error}</p>}

      <form onSubmit={handleSubmit} className={styles.form}>
        <label>
          Name
          <input
            type="text"
            value={name}
            onChange={e => setName(e.target.value)}
            required
          />
        </label>
        <label>
          Email
          <input
            type="email"
            value={email}
            onChange={e => setEmail(e.target.value)}
            required
          />
        </label>
        <label>
          Password
          <input
            type="password"
            value={password}
            onChange={e => setPassword(e.target.value)}
            required
          />
        </label>
        <button type="submit" className={styles.button}>Register</button>
      </form>
    </div>
  );
};

export default RegisterPage;
File: D:\goit-react-hw-08-1-phonebook\src\redux\authOperations.js 
// src/redux/authOperations.js
import { createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

const API_URL = 'https://connections-api.goit.global'; // Base API URL

// Define setAuthHeader to set the token in headers
const setAuthHeader = (token) => {
  axios.defaults.headers.common.Authorization = `Bearer ${token}`;
};

// Register user
export const registerUser = createAsyncThunk(
  'auth/register',
  async (userData, thunkAPI) => {
    try {
      const { data } = await axios.post(`${API_URL}/users/signup`, userData);
      return data;
    } catch (error) {
      return thunkAPI.rejectWithValue('Registration failed');
    }
  }
);

// Login user
export const loginUser = createAsyncThunk(
  'auth/login',
  async (credentials, thunkAPI) => {
    try {
      const { data } = await axios.post(`${API_URL}/users/login`, credentials);
      setAuthHeader(data.token); // Set token in headers after login
      return data;
    } catch (error) {
      return thunkAPI.rejectWithValue('Login failed');
    }
  }
);

// Logout user
export const logoutUser = createAsyncThunk('auth/logout', async (_, thunkAPI) => {
  const token = thunkAPI.getState().auth.token;

  if (!token) {
    return thunkAPI.rejectWithValue('No token found, cannot logout');
  }

  try {
    setAuthHeader(token); // Set the token in headers
    await axios.post(`${API_URL}/users/logout`);
    axios.defaults.headers.common.Authorization = ''; // Clear token
  } catch (error) {
    return thunkAPI.rejectWithValue('Logout failed');
  }
});
File: D:\goit-react-hw-08-1-phonebook\src\redux\authSlice.js 
// src/redux/authSlice.js
import { createSlice } from '@reduxjs/toolkit';
import { registerUser, loginUser, logoutUser } from './authOperations';

const authSlice = createSlice({
  name: 'auth',
  initialState: {
    user: null,
    token: null, // Store the JWT token here
    isLoggedIn: false,
    error: null,
  },
  extraReducers: builder => {
    builder
      // After registration, save token and user data
      .addCase(registerUser.fulfilled, (state, { payload }) => {
        state.user = payload.user;
        state.token = payload.token; // Save token
        state.isLoggedIn = true;
      })
      // After login, save token and user data
      .addCase(loginUser.fulfilled, (state, { payload }) => {
        state.user = payload.user;
        state.token = payload.token; // Save token
        state.isLoggedIn = true;
      })
      // After logout, clear token and user data
      .addCase(logoutUser.fulfilled, state => {
        state.user = null;
        state.token = null; // Clear token
        state.isLoggedIn = false;
      });
  },
});

export default authSlice.reducer;
File: D:\goit-react-hw-08-1-phonebook\src\redux\contactsOperations.js 
import { createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

const API_URL = 'https://connections-api.goit.global';

// Fetch contacts operation
export const fetchContacts = createAsyncThunk(
  'contacts/fetchAll',
  async (_, thunkAPI) => {
    try {
      const response = await axios.get(`${API_URL}/contacts`); // Correct endpoint
      console.log('Contacts fetched:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error fetching contacts:', error.message);
      return thunkAPI.rejectWithValue('Failed to fetch contacts');
    }
  }
);

// Add contact operation
export const addContact = createAsyncThunk(
  'contacts/addContact',
  async (newContact, thunkAPI) => {
    try {
      const response = await axios.post(`${API_URL}/contacts`, newContact); // Correct endpoint
      console.log('Contact added:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error adding contact:', error.message);
      return thunkAPI.rejectWithValue('Failed to add contact');
    }
  }
);

// Delete contact operation
export const deleteContact = createAsyncThunk(
  'contacts/deleteContact',
  async (contactId, thunkAPI) => {
    try {
      await axios.delete(`${API_URL}/contacts/${contactId}`); // Correct endpoint
      console.log(`Contact with ID ${contactId} deleted`);
      return contactId;
    } catch (error) {
      console.error('Error deleting contact:', error.message);
      return thunkAPI.rejectWithValue('Failed to delete contact');
    }
  }
);
// Update contact operation
export const updateContact = createAsyncThunk(
  'contacts/updateContact',
  async ({ id, updatedContact }, thunkAPI) => {
    try {
      const response = await axios.put(`${API_URL}/contacts/${id}`, updatedContact);
      return response.data;
    } catch (error) {
      return thunkAPI.rejectWithValue('Failed to update contact');
    }
  }
);
File: D:\goit-react-hw-08-1-phonebook\src\redux\contactsSlice.js 
import { createSlice } from '@reduxjs/toolkit';
import { fetchContacts, addContact, deleteContact, updateContact } from './contactsOperations';

const contactsSlice = createSlice({
  name: 'contacts',
  initialState: {
    items: [],
    filter: '',
    isLoading: false,
    error: null,
  },
  reducers: {
    setFilter(state, action) {
      state.filter = action.payload;
    },
  },
  extraReducers: builder => {
    builder
      .addCase(fetchContacts.pending, state => {
        state.isLoading = true;
      })
      .addCase(fetchContacts.fulfilled, (state, action) => {
        state.isLoading = false;
        state.items = action.payload;
      })
      .addCase(fetchContacts.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
      })
      .addCase(addContact.fulfilled, (state, action) => {
        state.items.push(action.payload);
      })
      .addCase(deleteContact.fulfilled, (state, action) => {
        state.items = state.items.filter(contact => contact.id !== action.payload);
      })
      .addCase(updateContact.fulfilled, (state, action) => {
        const index = state.items.findIndex(contact => contact.id === action.payload.id);
        if (index !== -1) {
          state.items[index] = action.payload;
        }
      });
  },
});

export const { setFilter } = contactsSlice.actions;
export default contactsSlice.reducer;
File: D:\goit-react-hw-08-1-phonebook\src\redux\store.js 
// src/redux/store.js
import { configureStore } from '@reduxjs/toolkit';
import contactsReducer from './contactsSlice';
import authReducer from './authSlice';

const store = configureStore({
  reducer: {
    contacts: contactsReducer,
    auth: authReducer,
  },
});

export default store;
