File: D:\goit-react-hw-08-1-phonebook\src\index.js 
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom'; // Import BrowserRouter
import store from './redux/store';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>
);
File: D:\goit-react-hw-08-1-phonebook\src\redux\authOperations.js 
// src/redux/authOperations.js
import { createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

// Set the Authorization header
const setAuthHeader = token => {
  axios.defaults.headers.common.Authorization = `Bearer ${token}`;
};

// Register user
export const registerUser = createAsyncThunk(
  'auth/register',
  async (userData, thunkAPI) => {
    try {
      console.log('Registering user with data:', userData); // Log the data
      const { data } = await axios.post('/users/signup', userData);
      return data;
    } catch (error) {
      console.error('Registration error:', error.response?.data || error.message); // Log any errors
      return thunkAPI.rejectWithValue('Registration failed');
    }
  }
);


// Login user
export const loginUser = createAsyncThunk(
  'auth/login',
  async (credentials, thunkAPI) => {
    try {
      const { data } = await axios.post('/users/login', credentials);
      axios.defaults.headers.common.Authorization = `Bearer ${data.token}`; // Set the token after login
      return data;  // The response should contain both token and user data
    } catch (error) {
      return thunkAPI.rejectWithValue('Login failed.');
    }
  }
);


// Logout user
export const logoutUser = createAsyncThunk('auth/logout', async (_, thunkAPI) => {
  const token = thunkAPI.getState().auth.token;

  console.log('Token being sent for logout:', token);

  if (!token) {
    return thunkAPI.rejectWithValue('No token found, cannot logout.');
  }

  try {
    setAuthHeader(token);
    await axios.post('/users/logout');
    axios.defaults.headers.common.Authorization = '';
  } catch (error) {
    console.error('Logout error:', error.response?.data || error.message);
    return thunkAPI.rejectWithValue('Logout failed. Unauthorized.');
  }
});
File: D:\goit-react-hw-08-1-phonebook\src\redux\authSlice.js 
// src/redux/authSlice.js
import { createSlice } from '@reduxjs/toolkit';
import { registerUser, loginUser, logoutUser } from './authOperations';

const authSlice = createSlice({
  name: 'auth',
  initialState: {
    user: null,
    token: null, // Store the JWT token here
    isLoggedIn: false,
    error: null,
  },
  extraReducers: builder => {
    builder
      // After registration, save token and user data
      .addCase(registerUser.fulfilled, (state, { payload }) => {
        state.user = payload.user;
        state.token = payload.token; // Save token
        state.isLoggedIn = true;
      })
      // After login, save token and user data
      .addCase(loginUser.fulfilled, (state, { payload }) => {
        state.user = payload.user;
        state.token = payload.token; // Save token
        state.isLoggedIn = true;
      })
      // After logout, clear token and user data
      .addCase(logoutUser.fulfilled, state => {
        state.user = null;
        state.token = null; // Clear token
        state.isLoggedIn = false;
      });
  },
});

export default authSlice.reducer;
File: D:\goit-react-hw-08-1-phonebook\src\redux\contactsOperations.js 
import { createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

const API_URL = 'https://connections-api.goit.global';

// Fetch contacts operation
export const fetchContacts = createAsyncThunk(
  'contacts/fetchAll',
  async (_, thunkAPI) => {
    try {
      const response = await axios.get(`${API_URL}/contacts`); // Correct endpoint
      console.log('Contacts fetched:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error fetching contacts:', error.message);
      return thunkAPI.rejectWithValue('Failed to fetch contacts');
    }
  }
);

// Add contact operation
export const addContact = createAsyncThunk(
  'contacts/addContact',
  async (newContact, thunkAPI) => {
    try {
      const response = await axios.post(`${API_URL}/contacts`, newContact); // Correct endpoint
      console.log('Contact added:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error adding contact:', error.message);
      return thunkAPI.rejectWithValue('Failed to add contact');
    }
  }
);

// Delete contact operation
export const deleteContact = createAsyncThunk(
  'contacts/deleteContact',
  async (contactId, thunkAPI) => {
    try {
      await axios.delete(`${API_URL}/contacts/${contactId}`); // Correct endpoint
      console.log(`Contact with ID ${contactId} deleted`);
      return contactId;
    } catch (error) {
      console.error('Error deleting contact:', error.message);
      return thunkAPI.rejectWithValue('Failed to delete contact');
    }
  }
);
File: D:\goit-react-hw-08-1-phonebook\src\redux\contactsSlice.js 
import { createSlice } from '@reduxjs/toolkit';
import { fetchContacts, addContact, deleteContact } from './contactsOperations';

const contactsSlice = createSlice({
  name: 'contacts',
  initialState: {
    items: [],
    isLoading: false,
    error: null,
  },
  extraReducers: builder => {
    builder
      .addCase(fetchContacts.pending, state => {
        state.isLoading = true;
      })
      .addCase(fetchContacts.fulfilled, (state, action) => {
        state.isLoading = false;
        state.items = action.payload;
      })
      .addCase(fetchContacts.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
      })
      .addCase(addContact.fulfilled, (state, action) => {
        state.items.push(action.payload);
      })
      .addCase(deleteContact.fulfilled, (state, action) => {
        state.items = state.items.filter(contact => contact.id !== action.payload);
      });
  },
});

export default contactsSlice.reducer;
File: D:\goit-react-hw-08-1-phonebook\src\redux\store.js 
// src/redux/store.js
import { configureStore } from '@reduxjs/toolkit';
import contactsReducer from './contactsSlice';
import authReducer from './authSlice';

const store = configureStore({
  reducer: {
    contacts: contactsReducer,
    auth: authReducer,
  },
});

export default store;
